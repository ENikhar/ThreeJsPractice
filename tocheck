import * as THREE from "three";
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls.js";
import { depth } from "three/tsl";

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(
  75,
  window.innerWidth / window.innerHeight,
  0.1,
  1000
);
camera.position.set(0, 0, 20);

const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);
const controls = new OrbitControls(camera, renderer.domElement);

const origin = new THREE.Vector2(0, 0);

function fun1() {
  const height = 2,
    width = 2;
  const shape = new THREE.Shape();
  shape.moveTo(origin.x, origin.y);
  shape.lineTo(origin.x + width, origin.y);
  shape.lineTo(origin.x + width, origin.y + height);
  shape.lineTo(origin.x + width + width, origin.y + height);
  shape.lineTo(origin.x + width + width, origin.y + height + height);
  shape.lineTo(origin.x + width, origin.y + height + height);
  shape.lineTo(origin.x + width, origin.y + height + height + height);
  shape.lineTo(origin.x, origin.y + height + height + height);
  shape.lineTo(origin.x, origin.y + height + height);
  shape.lineTo(origin.x - width, origin.y + height + height);
  shape.lineTo(origin.x - width, origin.y + height);
  shape.lineTo(origin.x, origin.y + height);
  shape.lineTo(origin.x, origin.y);

  const extrudeSettings = {
    bevelEnabled: false,
    steps: 1,
    extrudePath: new THREE.CatmullRomCurve3([
      new THREE.Vector3(0, 0, 0),
      new THREE.Vector3(10, 0, 0),
    ]),
  };

  const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);
  const material = new THREE.MeshBasicMaterial({
    color: "#ff0000",
    wireframe: false,
  });
  const mesh = new THREE.Mesh(geometry, material);
  scene.add(mesh);

  const vertices = [];
  const positionAttribute = geometry.attributes.position;

  for (let i = 0; i < positionAttribute.count; i++) {
    const x = positionAttribute.getX(i);
    const y = positionAttribute.getY(i);
    const z = positionAttribute.getZ(i);
    vertices.push([x, y, z]);
  }

  const uniqueVertices = [
    ...new Set(vertices.map((v) => JSON.stringify(v))),
  ].map((v) => JSON.parse(v));

  console.log(uniqueVertices);
}

function fun2() {
  camera.position.set(0, 0, 200);
  const points = [];
  function addPoint(x, y) {
    points.push(new THREE.Vector3(x, y, 0));
  }
  const shape = new THREE.Shape();
  shape.moveTo(25, 25);
  addPoint(25, 25);
  shape.bezierCurveTo(25, 25, 20, 0, 0, 0);
  addPoint(20, 0);
  addPoint(0, 0);

  shape.bezierCurveTo(-30, 0, -30, 35, -30, 35);
  addPoint(-30, 0);
  addPoint(-30, 35);

  shape.bezierCurveTo(-30, 55, -10, 77, 25, 95);
  addPoint(-30, 55);
  addPoint(-10, 77);
  addPoint(25, 95);

  shape.bezierCurveTo(60, 77, 80, 55, 80, 35);
  addPoint(60, 77);
  addPoint(80, 55);
  addPoint(80, 35);

  shape.bezierCurveTo(80, 35, 80, 0, 50, 0);
  addPoint(80, 0);
  addPoint(50, 0);

  shape.bezierCurveTo(35, 0, 25, 25, 25, 25);
  addPoint(35, 0);
  addPoint(25, 25);

  const geometry = new THREE.ExtrudeGeometry(shape, { depth: 1 });
  const material = new THREE.MeshBasicMaterial({
    color: "#ff0000",
    wireframe: false,

  });
  const mesh = new THREE.Mesh(geometry, material);
  scene.add(mesh);

  // const vertexMaterial = new THREE.MeshBasicMaterial({ color: "blue" });
  // points.forEach((point) => {
  //   const vertexGeometry = new THREE.SphereGeometry(1, 16, 16);
  //   const vertexMesh = new THREE.Mesh(vertexGeometry, vertexMaterial);
  //   vertexMesh.position.set(point.x, point.y, 0);
  //   scene.add(vertexMesh);
  // });

  // const heart2 = new THREE.Shape();
  // heart2.moveTo(0, 0);
  // heart2.lineTo(-15 , -25);
  // heart2.lineTo(-30 , -30);
  // heart2.lineTo(-50 , -25);
  // heart2.lineTo(-60 , 0);
  // heart2.lineTo(-50 , 25);
  // heart2.lineTo(-30 , 50);
  // heart2.lineTo(-5 , 70);
  // heart2.lineTo(0 , 75);


  // const extrudeSettings = {
  //   depth: 10,
  //   extrudePath : new THREE.CatmullRomCurve3([
  //     new THREE.Vector3(0, 0, 0),
  //     new THREE.Vector3(10, 0, 0),
  //   ]),
  // }

  // const hgeometry = new THREE.ExtrudeGeometry(heart2, extrudeSettings);
  // const hmaterial = new THREE.MeshBasicMaterial({ color: "#ff0000", wireframe: false });
  // const hmesh = new THREE.Mesh(hgeometry, hmaterial);
  // hmesh.rotateY(-Math.PI / 2)
  // scene.add(hmesh);
}

window.addEventListener("resize", () => {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});

function animate() {
  requestAnimationFrame(animate);
  renderer.render(scene, camera);
}
animate();

// fun1();
fun2();
